# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

工作：
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_编译器：铿锵声
            cpp_编译器： clang++
        排除：
          -操作系统： windows-最新
            c_编译器： gcc
          -操作系统： windows-最新
            c_编译器：铿锵声
          -操作系统： ubuntu-最新
            c_编译器： cl

    脚步：
    -使用： actions/checkout@v3

    - name :设置可重用的字符串
      # 将重复的输入字符串（例如构建输出目录）转换为步骤输出。这些步骤输出可在整个工作流程文件中使用。
      id: strings
      外壳： bash
      运行：|
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    -名称：配置CMake
      # 在“build”子目录中配置 CMake。仅当您使用单配置生成器（例如 make）时才需要“CMAKE_BUILD_TYPE”。
      # 参见 https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      运行：>
        cmake -B ${{steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}}
        -DCMAKE_C_COMPILER=${{matrix.c_compiler}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
